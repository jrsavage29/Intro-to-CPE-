ldi r0, 4
shl r0, r0
shl r0, r0
jmp r0   
xor r0, r0, r0
ld r1, r0
inc r0, r0
ld r2, r0
inc r0, r0
ld r3, r0
inc r0, r0
ld r4, r0
inc r0, r0
ld r5, r0
ldi r0, 0
brz r0, 0  


//creating the last 4 digits of the student ID (3855) and storing them while using register 5 as a pointer to memory location 4


ldi r6, 3									
shl r6, r6									
shl r6, r6									
shl r6, r6									
shl r6, r6									
adi r6, r6, 7
adi r6, r6,	1
shl r6, r6
shl r6, r6
shl r6, r6
shl r6, r6
adi r6, r6, 5
shl r6, r6
shl r6, r6
shl r6, r6
shl r6, r6
adi r6, r6, 5
ldi r3, 4
st r3, r6


//Create a zero register: r0


ldi r0, 0


//derive a for loop counter (x): r1
// derive a general DM pointer: r3


ldi r3, 1
ld r1, r3
dec r1, r1


//derive an array poiner(y): r2


ldi r3, 0
ld r2, r3


//derive a max and min: r4


ld r4, r2


//START OF THE FOR LOOP


inc r2, r2
ld r6, r2


/////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//CREATE THE MASK USED FOR ONLY COMPARING THE SIGN OF THE FPs//////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////


ldi r5, 7
adi r5,r5, 1
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
and r7, r4, r5
shr r7, r7
and r5, r6, r5
shr r5, r5
xor r3, r5, r7
brz r3, 8
sub r3, r7, r5 
brn r3, 3
add r4, r0, r6
brz r0, 2
add r4, r0, r4
brz r0, 30
brz r0,	-30


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//THIS WILL MARK THE END OF CHECKING THE SIGNS OF THE MAX AND THE NEXT VALUE IN THE ARRAY. WE WILL NOW PROCEED //
//TO CHECKING THE 4 BITS OF THE EXPONENT OF THE CURRENT MAX AND THE NEXT VALUE IN THE ARRAY IF NECESSARY /////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


ldi r0, 1
ldi r5, 7
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 7
adi r5, r5, 1
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
and r7, r4, r5
and r5, r6, r5
xor r3, r5, r7
brz r3, 9
ldi r0, 0
sub r3, r7, r5 
brn r3, 3
add r4, r0, r4
brz r0, 2
add r4, r0, r6
brz r0, 3
brz r0,	-30


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//THIS WILL MARK THE END OF CHECKING THE 4 BITS OF THE EXPONENT OF THE MAX AND THE NEXT VALUE IN THE ARRAY. ///
//WE WILL NOW PROCEED TO CHECKING THE 11 BITS OF THE MANTISSA OF THE ////////////////////////////////////////
//CURRENT MAX AND THE NEXT VALUE IN THE ARRAY IF NECESSARY////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


ldi r0, 1
brz r0, 30
brz r0, -3
ldi r5, 0
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 7
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 7
adi r5, r5, 7
adi r5, r5, 1
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 7
adi r5, r5, 7
adi r5, r5, 1
and r7, r4, r5
and r5, r6, r5
xor r3, r5, r7
brz r3, 9
ldi r0, 0
sub r3, r7, r5 
brn r3, 3
add r4, r0, r4
brz r0, 4
add r4, r0, r6
brz r0, 2
brz r0,	-32


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//THIS WILL MARK THE END OF COMPARISON ALGORITHM. /////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


inc r2, r2
dec r1, r1
brz r1, 2
brz r0, -4
ldi r3, 2 
st r3, r4


/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//NOW TO CHECK FOR THE MIN ////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////


//derive a for loop counter (x): r1
// derive a general DM pointer: r3


ldi r3, 1
ld r1, r3
dec r1, r1


//derive an array poiner(y): r2


ldi r3, 0
ld r2, r3


//derive a max and min: r4 


ld r4, r2

//START OF THE FOR LOOP


inc r2, r2
ld r6, r2


/////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//CREATE THE MASK USED FOR ONLY COMPARING THE SIGN OF THE FPs//////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////


ldi r5, 7
adi r5,r5, 1
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
and r7, r4, r5
shr r7, r7
and r5, r6, r5
shr r5, r5
xor r3, r5, r7
brz r3, 8
sub r3, r7, r5 
brn r3, 3
add r4, r0, r4
brz r0, 2
add r4, r0, r6
brz r0, 30
brz r0,	-30


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//THIS WILL MARK THE END OF CHECKING THE SIGNS OF THE MIN AND THE NEXT VALUE IN THE ARRAY. WE WILL NOW PROCEED //
//TO CHECKING THE 4 BITS OF THE EXPONENT OF THE CURRENT MIN AND THE NEXT VALUE IN THE ARRAY IF NECESSARY /////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

ldi r0, 1
ldi r5, 7
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 7
adi r5, r5, 1
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 0
and r7, r4, r5
and r5, r6, r5
xor r3, r5, r7
brz r3, 9
ldi r0, 0
sub r3, r7, r5 
brn r3, 3
add r4, r0, r4
brz r0, 2
add r4, r0, r6
brz r0, 3
brz r0,	-30


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//THIS WILL MARK THE END OF CHECKING THE 4 BITS OF THE EXPONENT OF THE MIN AND THE NEXT VALUE IN THE ARRAY. ///
//WE WILL NOW PROCEED TO CHECKING THE 11 BITS OF THE MANTISSA OF THE ////////////////////////////////////////
//CURRENT MIN AND THE NEXT VALUE IN THE ARRAY IF NECESSARY////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

ldi r0, 1
brz r0, 30
brz r0, -3
ldi r5, 0
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 7
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 7
adi r5, r5, 7
adi r5, r5, 1
shl r5, r5
shl r5, r5
shl r5, r5
shl r5, r5
adi r5, r5, 7
adi r5, r5, 7
adi r5, r5, 1
and r7, r4, r5
and r5, r6, r5
xor r3, r5, r7
brz r3, 9
ldi r0, 0
sub r3, r7, r5 
brn r3, 3
add r4, r0, r6
brz r0, 4
add r4, r0, r4
brz r0, 2
brz r0,	-32


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//THIS WILL MARK THE END OF COMPARISON ALGORITHM. /////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


inc r2, r2
dec r1, r1
brz r1, 2
brz r0, -4
ldi r3, 3
st r3, r4
ldi r0, 4
jmp r0

